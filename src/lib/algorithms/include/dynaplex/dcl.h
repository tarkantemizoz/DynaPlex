#pragma once
#include "dynaplex/mdp.h"
#include "dynaplex/policy.h"
#include "dynaplex/system.h"
#include "dynaplex/vargroup.h"
#include "dynaplex/policytrainer.h"
#include "dynaplex/samplegenerator.h"

namespace DynaPlex::Algorithms {
	class DCL
	{
	public:
		DCL(const DynaPlex::System& system, DynaPlex::MDP mdp, DynaPlex::Policy policy_0=nullptr, const DynaPlex::VarGroup& config = VarGroup{});
		/// Trains a number of policies, each using data generated by the previous generation. 
		void TrainPolicy();
		///  Gets the trained policy of the specified generation. Setting generation to -1 (default) will yield the latest generation.  
		DynaPlex::Policy GetPolicy(int64_t generation = -1);
		/// Gets a vector of all trained policies.
		std::vector<DynaPlex::Policy> GetPolicies();	
	
	private:
		std::string GetPathOfSampleFile(int64_t generation);	
	

		int64_t num_gens,resume_gen, rng_seed;
		bool retrain_lastgen_only, silent;
		DynaPlex::NN::PolicyTrainer trainer;
		DynaPlex::VarGroup nn_architecture = DynaPlex::VarGroup{};
		DynaPlex::MDP mdp;
		DynaPlex::Policy policy_0;
		DynaPlex::System system;
		DynaPlex::DCL::SampleGenerator sampleCollector;

	};
}